use Raylib::Grammar;
use Raylib::Actions;

constant generation-message = "# This Raku module is generated from raylib.h";

sub generate-bindings($raylib-h-file, $output-dir) is export {
    my ($module-name, $wrapper-name, $alloc-filename, $constant, $lib);
    my $filename = do given $raylib-h-file {
      when .ends-with('raylib.h') {
        $wrapper-name = 'raylib_pointerized_wrapper.c';
        $constant = 'LIBRAYLIB';
        $lib = 'raylib';
        $module-name = 'Raylib::Bindings:ver<0.0.15>:auth<zef:vushu>;'
        $alloc-filename = 'raylib_allocations.c'
        'lib/Raylib/Bindings.rakumod'
      }

      when .ends-with('raugui.h') {
        $wrapper-name = 'raygui_pointerized_wrapper.c';
        $constant = 'LIBRAYGUI';
        $lib = 'raygui';
        $module-name = 'Raylib::GuiBindings:ver<0.0.15>:auth<zef:vushu>;'
        $alloc-filename = 'raygui_allocations.c'
        'lib/Raylib/GuiBindings.rakumod'
      }

      default {
        die "Unknown .h file '$_'!";
      }
    }

    say "Generating raylib bindings...";
    my $parser = RaylibGrammar.new;
    my $actions = RaylibActions.new( libname => $constant ) ;
    my $raylib = slurp $raylib-h-file;
    my $parsed = $parser.parse($raylib, actions => $actions);


    my $file  = open $filename, :w;
    $file.say(generation-message);
    $file.say("unit module { $module-name }");
    $file.say("use NativeCall;");
    $file.say("constant { $constant } = %\?RESOURCES<libraries/{ $lib }>;");
    for $actions.bindings -> $binding {
        $file.say($binding);
    }

    $file.say("####### Predefined colors ########");
    for $actions.predifined-colors -> $binding {
        $file.say($binding);
    }

    $file.say("####### Pointerized functions ########");
    for $actions.pointerized_bindings -> $binding {
        $file.say($binding);
    }

    $file.say("####### Allocation functions ########");
    for $actions.alloc_bindings -> $binding {
        $file.say($binding);
    }

    $file.close;

    my $wrapper_file  = open "$output-dir/$wrapper-name", :w;
    $wrapper_file.say("// This file is generated by raylib-raku");
    $wrapper_file.say("#include <raylib.h>");
    $wrapper_file.say("#include <raygui.h>")
      if $wrapper-name.starts-with('raygui');
    $wrapper_file.say("#include <stdlib.h>");

    for $actions.c_pointerize_bindings -> $binding {
        $wrapper_file.say($binding);
    }
    $wrapper_file.close;

    my $alloc_file  = open "$output-dir/$alloc-filename", :w;
    $alloc_file.say("// This file is generated by raylib-raku");
    $alloc_file.say("#include <raylib.h>");
    $alloc_file.say("#include <raygui.h>"
      if $alloc-name.starts-with('raygui');
    $alloc_file.say("#include <stdlib.h>");
    $alloc_file.say("#include <string.h>");

    for $actions.c_alloc_funtions -> $binding {
        $alloc_file.say($binding);
    }
    $alloc_file.close;
    say "Done generating raylib bindings!";
}


sub MAIN {
    generate-bindings($*CWD);
}
