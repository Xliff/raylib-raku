use v6.c;

use Test;
use NativeCall;

use Raylib::Raw::Definitions;
use Raylib::Raw::Structs;

my @classes = Raylib::Raw::Structs.WHO
                                  .pairs
                                  .grep({
                                     .key.defined
                                     &&
                                     .value !~~ StructSkipsTest
                                     &&
                                     .value.REPR eq 'CStruct'
                                   })
                                  .map( *.key )
                                  .sort;

plan @classes.elems;

for @classes {
  sub sizeof () returns int64 { ... }
  trait_mod:<is>( &sizeof, :native(LIBRAYLIB) );
  trait_mod:<is>( &sizeof, :symbol('sizeof_' ~ $_) );

  next unless .chars;

  my $c = ::("$_");

  next unless $c.HOW ~~ Metamodel::ClassHOW;
  next unless $c.REPR eq 'CStruct';

  # diag $c.^shortname;
  if
    ($c.WHY.leading // '') ~~ / ['Opaque' | 'Skip Struct'] [':' (.+) ]? $$ /
    ||
    $c ~~ StructSkipsTest
  {
    my $pass-msg = "Structure '{ $_ }' is not to be tested";
    if $c ~~ StructSkipsTest {
      $pass-msg ~= " ({ $c.reason })";
    } else {
      $pass-msg ~= " ({ $/[0] })" if $/[0]
    }

    pass $pass-msg;
    next;
  }
  is nativesizeof($c), sizeof(), "Structure sizes for { $_ } match";
}
