use v6.c;

use Test;
use NativeCall;

use Raylib::Bindings;

#$cu ~= '::EXPORT::DEFAULT';
my @classes = Raylib::Bindings.WHO
                              .keys
                              .grep( *.defined )
                              .sort;

plan 65;

for @classes {
  sub sizeof () returns int64 { ... }
  trait_mod:<is>( &sizeof, :native(LIBRAYLIB) );
  trait_mod:<is>( &sizeof, :symbol('sizeof_' ~ $_) );

  next unless .chars;

  my $c = ::("$_");

  next unless $c.HOW ~~ Metamodel::ClassHOW;
  next unless $c.REPR eq 'CStruct';

  #diag $_;
  # if
  #   ($c.WHY.leading // '') ~~ / ['Opaque' | 'Skip Struct'] [':' (.+) ]? $$ /
  #   ||
  #   $c ~~ StructSkipsTest
  # {
    # my $pass-msg = "Structure '{ $_ }' is not to be tested";
    # if $c ~~ StructSkipsTest {
    #   $pass-msg ~= " ({ $c.reason })";
    # } else {
    #   $pass-msg ~= " ({ $/[0] })" if $/[0]
    # }

  #   pass $pass-msg;
  #   next;
  # }
  is nativesizeof($c), sizeof(), "Structure sizes for { $_ } match";
}

# cw: Use for generic struct size debugging.
#
# for <gsize GstMapFlags GHookList> {
#   sub sizeof () returns int64 { ... }
#   trait_mod:<is>( &sizeof, :native('t/00-struct-sizes.so') );
#   trait_mod:<is>( &sizeof, :symbol('sizeof_' ~ $_) );
#
#   diag sizeof();
# }
